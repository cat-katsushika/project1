openapi: 3.0.3
info:
  title: 教科書・参考書取引所 OpenAPI
  version: 1.0.0
  description: 教科書・参考書取引所 OpenAPI Schema
servers:
  - url: http://localhost:8000
    description: 開発用サーバー
  - url: https://www.uni-bo.net
    description: 本番用サーバー
paths:
  /api/auth/jwt/create/:
    post:
      summary: ログイン(jwt取得)
      operationId: auth_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
        - jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenObtainPair"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenObtainPair"
          description: ""
  /api/auth/jwt/refresh/:
    post:
      summary: リフレッシュ(アクセストークン再発行)
      operationId: auth_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
        - jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenRefresh"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefresh"
          description: ""
  /api/auth/logout/:
    post:
      summary: ログアウト
      operationId: auth_logout_create
      description: |-
        Takes a token and blacklists it. Must be used with the
        `rest_framework_simplejwt.token_blacklist` app installed.
      tags:
        - jwt
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenBlacklist"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/TokenBlacklist"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/TokenBlacklist"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenBlacklist"
          description: "ログアウト成功"
  /api/auth/users/:
    #   get:
    #     operationId: auth_users_list
    #     parameters:
    #     - name: page
    #       required: false
    #       in: query
    #       description: A page number within the paginated result set.
    #       schema:
    #         type: integer
    #     tags:
    #     - auth
    #     security:
    #     - jwtAuth: []
    #     responses:
    #       '200':
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/PaginatedUserList'
    #         description: ''
    post:
      summary: サインアップ
      operationId: auth_users_create
      tags:
        - auth
      description: ユーザー登録後Emailを送信
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UserCreate"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UserCreate"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCreate"
          description: "サインアップ成功"
        400:
          description: サインアップ失敗
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    detail:
                      type: string
                      description: エラー詳細

              examples:
                名前未入力:
                  value:
                    - detail: 名前を入力してください
                メールアドレス未入力:
                  value:
                    - detail: メールアドレスを入力してください
                メールアドレス上限文字数:
                  value:
                    - detail: メールアドレスは350文字まで入力可能です
                メールアドレス大学ドメイン制約:
                  value:
                    - detail: メールアドレスの形式は「@ed.tus.ac.jp」です

  # /api/auth/users/{id}/:
  #   get:
  #     operationId: auth_users_retrieve
  #     parameters:
  #     - in: path
  #       name: id
  #       schema:
  #         type: string
  #         format: uuid
  #         title: ユーザーID
  #       description: A UUID string identifying this ユーザー.
  #       required: true
  #     tags:
  #     - auth
  #     security:
  #     - jwtAuth: []
  #     responses:
  #       '200':
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #         description: ''
  #   put:
  #     operationId: auth_users_update
  #     parameters:
  #     - in: path
  #       name: id
  #       schema:
  #         type: string
  #         format: uuid
  #         title: ユーザーID
  #       description: A UUID string identifying this ユーザー.
  #       required: true
  #     tags:
  #     - auth
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #         multipart/form-data:
  #           schema:
  #             $ref: '#/components/schemas/User'
  #       required: true
  #     security:
  #     - jwtAuth: []
  #     responses:
  #       '200':
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #         description: ''
  #   patch:
  #     operationId: auth_users_partial_update
  #     parameters:
  #     - in: path
  #       name: id
  #       schema:
  #         type: string
  #         format: uuid
  #         title: ユーザーID
  #       description: A UUID string identifying this ユーザー.
  #       required: true
  #     tags:
  #     - auth
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/PatchedUser'
  #         application/x-www-form-urlencoded:
  #           schema:
  #             $ref: '#/components/schemas/PatchedUser'
  #         multipart/form-data:
  #           schema:
  #             $ref: '#/components/schemas/PatchedUser'
  #     security:
  #     - jwtAuth: []
  #     responses:
  #       '200':
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/User'
  #         description: ''
  #   delete:
  #     operationId: auth_users_destroy
  #     parameters:
  #     - in: path
  #       name: id
  #       schema:
  #         type: string
  #         format: uuid
  #         title: ユーザーID
  #       description: A UUID string identifying this ユーザー.
  #       required: true
  #     tags:
  #     - auth
  #     security:
  #     - jwtAuth: []
  #     responses:
  #       '204':
  #         description: No response body
  /api/auth/users/activation/:
    post:
      summary: アカウント有効化
      operationId: auth_users_activation_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activation"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/Activation"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/Activation"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activation"
          description: ""
  /api/auth/users/me/:
    get:
      summary: ユーザー詳細取得API
      operationId: auth_users_me_retrieve
      tags:
        - auth
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    put:
      summary: ユーザー情報変更API
      operationId: auth_users_me_update
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    patch:
      summary: ユーザー情報一部変更API
      operationId: auth_users_me_partial_update
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PatchedUser"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PatchedUser"
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: ""
    delete:
      summary: ユーザー情報削除API
      operationId: auth_users_me_destroy
      tags:
        - auth
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "204":
          description: No response body
  /api/auth/users/resend_activation/:
    post:
      operationId: auth_users_resend_activation_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendEmailReset"
          description: ""
  /api/auth/users/reset_email/:
    post:
      operationId: auth_users_reset_email_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendEmailReset"
          description: ""
  /api/auth/users/reset_email_confirm/:
    post:
      operationId: auth_users_reset_email_confirm_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UsernameResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UsernameResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/UsernameResetConfirm"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsernameResetConfirm"
          description: ""
  /api/auth/users/reset_password/:
    post:
      operationId: auth_users_reset_password_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SendEmailReset"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendEmailReset"
          description: ""
  /api/auth/users/reset_password_confirm/:
    post:
      operationId: auth_users_reset_password_confirm_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PasswordResetConfirm"
        required: true
      security:
        - jwtAuth: []
        - {}
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PasswordResetConfirm"
          description: ""
  /api/auth/users/set_email/:
    post:
      operationId: auth_users_set_email_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetUsernameRetype"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SetUsernameRetype"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SetUsernameRetype"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetUsernameRetype"
          description: ""
  /api/auth/users/set_password/:
    post:
      operationId: auth_users_set_password_create
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetPasswordRetype"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SetPasswordRetype"
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/SetPasswordRetype"
        required: true
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetPasswordRetype"
          description: ""
  /api/campus/:
    $ref: "./campuses/paths/api-campus.yml"
  /api/campus/{id}/:
    $ref: "./campuses/paths/api-campus-{id}.yml"
  /api/comment/:
    $ref: "./comments/paths/api-comment.yml"
  /api/comment/create/:
    $ref: "./comments/paths/api-comment-create.yml"
  /api/items/:
    $ref: "./items/paths/api-items.yml"
  /api/items/create:
    $ref: "./items/paths/api-items-create.yml"
  /api/items/{id}/:
    $ref: "./items/paths/api-items-{id}.yml"
  /api/items/{id}/purchase/:
    $ref: "./items/paths/api-items-{id}-purchase.yml"
  /api/items/{id}/complete/:
    $ref: "./items/paths/api-items-{id}-complete.yml"
  /api/items/{id}/cancel/:
    $ref: "./items/paths/api-items-{id}-cancel.yml"
  /api/items/{id}/relisting/:
    $ref: "./items/paths/api-items-{id}-relisting.yml"
  /api/items/{id}/like-toggle/:
    $ref: "./items/paths/api-items-{id}-like-toggle.yml"
  /api/items/user/like/:
    $ref: "./items/paths/api-items-user-like.yml"
  /api/items/user/sell/:
    $ref: "./items/paths/api-items-user-sell.yml"
  /api/items/user/buy/:
    $ref: "./items/paths/api-items-user-buy.yml"
  /api/notification/:
    $ref: "./notifications/paths/api-notification.yml"
  /api/notification/{id}/update-importance/:
    $ref: "./notifications/paths/api-notification-{id}-update-importance.yml"
  /api/devices/:
    $ref: "./fcm_django/paths/api-devices.yml"
  /api/messages/:
    $ref: "./transaction_messages/paths/api-messages.yml"
  /api/messages/create/:
    $ref: "./transaction_messages/paths/api-messages-create.yml"
  /api/university/:
    $ref: "./campuses/paths/api-university.yml"
  /api/university/{id}/:
    $ref: "./campuses/paths/api-university-{id}.yml"
  /api/users/:
    get:
      operationId: users_list
      parameters:
        - name: page
          required: false
          in: query
          description: A page number within the paginated result set.
          schema:
            type: integer
      tags:
        - users
      security:
        - tokenAuth: []
        - jwtAuth: []
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserList"
          description: ""
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
        - token
        - uid
    ConditionEnum:
      enum:
        - new
        - fine
        - used
        - damaged
      type: string
      description: |-
        * `new` - 未使用
        * `fine` - 目立った傷や汚れなし
        * `used` - 使用感あり
        * `damaged` - 破損あり
    Image:
      type: object
      properties:
        order:
          type: integer
        photo_path:
          type: string
          format: uri
      required:
        - photo_path
    Item:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          type: string
          readOnly: true
        receivable_campus:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        is_liked_by_current_user:
          type: string
          readOnly: true
        listing_status:
          $ref: "#/components/schemas/ListingStatusEnum"
        price:
          type: integer
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        condition:
          $ref: "#/components/schemas/ConditionEnum"
        writing_state:
          $ref: "#/components/schemas/WritingStateEnum"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        buyer:
          type: string
          format: uuid
          title: ユーザーID
          nullable: true
      required:
        - condition
        - created_at
        - description
        - id
        - images
        - is_liked_by_current_user
        - name
        - price
        - receivable_campus
        - seller
        - updated_at
        - writing_state
    ListingStatusEnum:
      enum:
        - unpurchased
        - purchased
        - completed
        - canceled
      type: string
      description: |-
        * `unpurchased` - 未購入
        * `purchased` - 購入済み
        * `completed` - 取引完了
        * `canceled` - キャンセル済み
    PaginatedItemList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/Item"
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: "#/components/schemas/User"
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
        - new_password
        - token
        - uid
    PatchedItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        seller:
          type: string
          readOnly: true
        receivable_campus:
          type: string
        images:
          type: array
          items:
            $ref: "#/components/schemas/Image"
        is_liked_by_current_user:
          type: string
          readOnly: true
        listing_status:
          $ref: "#/components/schemas/ListingStatusEnum"
        price:
          type: integer
        name:
          type: string
          maxLength: 50
        description:
          type: string
          maxLength: 255
        condition:
          $ref: "#/components/schemas/ConditionEnum"
        writing_state:
          $ref: "#/components/schemas/WritingStateEnum"
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        buyer:
          type: string
          format: uuid
          title: ユーザーID
          nullable: true
    PatchedUser:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          title: ユーザーID
        email:
          type: string
          format: email
          title: メールアドレス
          maxLength: 350
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
    SetPasswordRetype:
      type: object
      properties:
        new_password:
          type: string
        re_new_password:
          type: string
        current_password:
          type: string
      required:
        - current_password
        - new_password
        - re_new_password
    SetUsernameRetype:
      type: object
      properties:
        current_password:
          type: string
        new_email:
          type: string
          format: email
          title: メールアドレス
          maxLength: 350
        re_new_email:
          type: string
      required:
        - current_password
        - new_email
        - re_new_email
    TokenBlacklist:
      type: object
      properties:
        refresh:
          type: string
          writeOnly: true
      required:
        - refresh
    TokenObtainPair:
      type: object
      properties:
        email:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
        - access
        - email
        - password
        - refresh
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
        - access
        - refresh
    University:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
        - id
        - name
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          title: ユーザーID
        email:
          type: string
          format: email
          title: メールアドレス
          maxLength: 350
      required:
        - email
        - id
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: メールアドレス
          maxLength: 350
        id:
          type: string
          format: uuid
          readOnly: true
          title: ユーザーID
        password:
          type: string
          writeOnly: true
        re_password:
          type: string
      required:
        - email
        - id
        - password
        - re_password
    UsernameResetConfirm:
      type: object
      properties:
        new_email:
          type: string
          format: email
          title: メールアドレス
          maxLength: 350
      required:
        - new_email
    WritingStateEnum:
      enum:
        - none
        - little
        - lot
      type: string
      description: |-
        * `none` - 全くない
        * `little` - 少しある
        * `lot` - かなりある
  securitySchemes:
    jwtAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "JWT"
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
    AccessTokenAuth:
      type: apiKey
      in: cookie
      name: access_token
