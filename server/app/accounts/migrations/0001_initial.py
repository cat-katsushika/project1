# Generated by Django 4.2.3 on 2023-07-08 07:40

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name="ユーザーID"
                    ),
                ),
                ("student_number", models.CharField(max_length=15, unique=True, verbose_name="学籍番号")),
                ("email", models.EmailField(max_length=350, unique=True, verbose_name="メールアドレス")),
                ("is_staff", models.BooleanField(default=False, verbose_name="管理サイトアクセス権限フラグ")),
                ("is_active", models.BooleanField(default=True, verbose_name="アカウント有効フラグ")),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="作成日")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="更新日")),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
            },
        ),
    ]
